var base_url = "http://188.166.122.113:5000";

var Volunteer = Backbone.Model.extend({
    urlRoot: "/volunteers",
    idAttribute: "volunteer_id",
    defaults: {
        volunteer_id: "",
        latitude: null,
        longitude: null,
        status: "",
        entity_id: null
    }    
});

var Volunteers = Backbone.Collection.extend({
    model: Volunteer,
    url: base_url + "/volunteers",
    initialize: function () {
    
        // This will be called when an item is added. pushed or unshifted
        this.on('add', function(model) {
            console.log('### Volunteer got added: ' + model.id);

            var lat = model.get("latitude");
            var lon = model.get("longitude");
            var v_id = model.id;
            var entity_id = model.get("entity_id");
            if(lat && lon){
                name = "vol_" + model.id;
                var entity = webRocketApplication.createVolunteerEntity(lat, lon, name);
                model.set("entity_id", entity.id);
                console.log('>>> volunteer entity created: ', model.get("entity_id"));
            }
        });

        // This will be called when an item is removed, popped or shifted
        this.on('remove',  function(model) {
            console.log('### Volunteer got removed: ' + model.id);
        });

        // This will be called when an item is updated
        this.on('change', function(model) {
            console.log('### Volunteer got changed: ' + model.id);
            var lat = model.get("latitude");
            var lon = model.get("longitude");
            var v_id = model.id;
            var entity_id = model.get("entity_id");
            if(lat && lon){
                if(entity_id){
                    var entity = webRocketApplication.moveVolunteerEntity(entity_id, lat, lon);
                    console.log('>>> volunteer entity moved: ', model.get("entity_id"));
                }
                else
                {
                    name = "vol_" + v_id;
                    var entity = webRocketApplication.createVolunteerEntity(lat, lon, name);
                    model.set("entity_id", entity.id);
                    console.log('>>> volunteer entity created: ', model.get("entity_id"));
                }
            }
        });
    },
});

var WebRocketApplication = IApplication.$extend(
{
    __init__ : function()
    {
        //Use Tundra.asset.loadScript() to load extra JS libraries
        this.$super("Meshmoon GEO");
        
        this.data = {};

        this.timing = new AsyncHelper(this.name, this);
        this.state =
        {
            camera : {}
        };

        // Monitor active camera change
        var activeCamera = Tundra.renderer.activeCameraEntity();
        if (activeCamera != null && activeCamera.camera != null)
            this.onActiveCameraChanged(activeCamera.camera);

        this.subscribeEvent(Tundra.renderer.onActiveCameraChanged(this, this.onActiveCameraChanged));

        // Run RTS camera application
        this.rts = {};
        this.rts.ent = Tundra.client.runApplication("RTS", "meshmoon-applications://meshmoon/rts-camera/rts-camera.webrocketjs");
        this.rts.ent.script.onScriptStarted(function(entity, component, scriptAsset, app) {
            this.rts.app = app;
        }.bind(this));

        // You can turn on debugging to see more internals
        //Tundra.plugins.meshmoonGeo.config.debug = true; // and/or
        //Tundra.plugins.meshmoonGeo.config.debugVolume = true;
        
        /* Run Meshmoon GEO at Oulu city center
           You can change this coordinate to be anywhere in the world
           and Meshmoon GEO will do its best to visualize the location. */
        Tundra.plugins.meshmoonGeo.start({
            lon : 25.466228,
            lat : 65.013439
        });
        //In Tundra scale is 1 unit = 1m
        //The documentation need some entry points

        // Setup default environment
        Tundra.plugins.meshmoonGeo.setupEnvironment();
        var _this = this;

        var _loadPolymerElements = IApplication.loadDependencies(this,"request-element.html", "video-element.html", "login-element.html");
        _loadPolymerElements.done(function(v){
            console.log('loaded the new baby polymer element(s)! ');
            this.loginElement = document.createElement("login-element");
            this.requestElement = document.createElement("request-element");
            this.videoElement = document.createElement("video-element");
            this.requestElement.hidden=true;
            Tundra.ui.addToCorner(this.loginElement, Tundra.ui.$class.Corner.TopLeft, Tundra.ui.$class.Position.End);
            Tundra.ui.addToCorner(this.requestElement, Tundra.ui.$class.Corner.TopLeft, Tundra.ui.$class.Position.End);
            console.log('... and positioned them HIGHER!!');
        }.bind(this));


        this.cameraEnt = Tundra.scene.createLocalEntity(["Name", "Placeable", "Camera"]);
        //this.rtsCamera = Tundra.renderer.activeCamera();

        this.subscribeEvent(Tundra.input.onMousePress(this, this.onMousePress));

        this.volunteers = new Volunteers();
        //var p = IApplication.loadDependencies(this,"uuid-input-element.html");
        //var transfer = Tundra.asset.requestAsset("http://www.oulunliikenne.fi/rss/weather_camera/camera.xml");
        //transfer.onCompleted(this, this.onAssetTransferCompleted);
    },
    switchToFreeCamera: function(volunteerEntityId){
        console.log("Free Camera!");
        this.cameraEnt.placeable.parentRef = volunteerEntityId;
        //this.camEntity.placeable.setParent(volunteerEntity);
        this.cameraEnt.camera.setActive();
    },
    switchToRTSCamera: function(){
        console.log("RTS Camera!");
        if(this.rtsCamera)
            this.rtsCamera.setActive();
        //this.rtsCamera.setActive();
    },
    createVolunteerEntity: function(latitude, longitude, name)
    {
        var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(latitude, longitude);
        var entity = Tundra.scene.createLocalEntity(["Name", "Mesh", "Placeable"]);
        entity.name = name;
        entity.mesh.meshRef = "http://meshmoon.s3.amazonaws.com/releases/meshmoon-applications/stable/meshmoon/user-presence/files/avatar-button/avatar.mesh"
        entity.mesh.materialRefs = ["http://meshmoon.s3.amazonaws.com/releases/meshmoon-applications/stable/meshmoon/user-presence/files/avatar-button/color.material",
                                    "http://meshmoon.s3.amazonaws.com/releases/meshmoon-applications/stable/meshmoon/user-presence/files/avatar-button/profile.material"]
        entity.placeable.setPosition(new THREE.Vector3(pos.x, 150, pos.z));
        entity.placeable.setScale(new THREE.Vector3(20, 20, 20));
        return entity;
    },

    moveVolunteerEntity: function(entityId, latitude, longitude)
    {
        var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(latitude, longitude);
        var entity = Tundra.scene.entityById(entityId);
        var oldpos = entity.placeable.position();

        console.log("oldpos: ", oldpos.x, oldpos.z);
        var tween = new TWEEN.Tween( { x: oldpos.x, z: oldpos.z } )
                .to( { x: pos.x , z:pos.z}, 3000 )
                .onUpdate( function () {
                    entity.placeable.setPosition(new THREE.Vector3(this.x, 150, this.z));
                } )
                .start();

        return entity;
    },

    //Listen to camera changes (position/zoom) and scale the avatars
    onMousePress: function()
    {
        //raycastAll() to get multiple entity
        //can use targets list, given the objects have Geometry property:
        //mesh and others .. etc
        var r = Tundra.renderer.raycast();
        if(r.entity) 
        {
            var volunteer = webRocketApplication.volunteers.findWhere({"entity_id": r.entity.id})
            if(volunteer){
                this.requestElement.hidden=false;
                this.switchToFreeCamera(r.entity.id);
                console.log(volunteer);
            }
            else
            {
                this.requestElement.hidden=true;
                this.switchToRTSCamera();
            }
        }
        else
        {
            this.requestElement.hidden=true;
            this.switchToRTSCamera();
        }
    },

    onActiveCameraChanged : function(activeCameraComponent, prevCameraComponent)
    {
        var cameraName = (activeCameraComponent.parentEntity ? activeCameraComponent.parentEntity.name : "");
        if (cameraName === "" || !cameraName)
            return;

        // Adjust far plane to handle big scene for Meshmoon GEO functionality
        this.camera = activeCameraComponent.parentEntity;
        this.camera.camera.farPlane = 1000000;

        this.log.debug("Active camera changed", this.camera.name);

        // If RTS camera execute configuration
        if (this.camera.name === "MeshmoonRtsCamera" && this.state.camera.configured === undefined)
        {
            this.rtsCamera = activeCameraComponent;
            this.state.camera.configured = true;
            this.timing.async("rts.config", function() {
                this.camera.exec(EntityAction.Local, "SetRotation", { x : -40, y : 0, z : 0 });
                this.camera.exec(EntityAction.Local, "SetDistance", 2000);
                this.camera.exec(EntityAction.Local, "SetMinDistance", 200);
                this.camera.exec(EntityAction.Local, "SetMaxDistance", this.camera.camera.farPlane * 0.4);
            }, 100);
        }
    },

    /** 
        Script destroy/unload handler. Called automatically 
        by the framework when the application is closed.
    */
    onScriptDestroyed : function()
    {
        Tundra.plugins.meshmoonGeo.stop();
    }
});

// Start the application by instantiating it
var webRocketApplication = new WebRocketApplication();

window.myApp = webRocketApplication;

setInterval(function(){
    console.log("sending request ...");
    webRocketApplication.volunteers.fetch({
        success: function (volunteers, response) {
            console.log("Volunteers received:", volunteers);
        },
    });
}.bind(webRocketApplication), 30000);
